@startuml
skinparam Style strictuml

participant ":Logic" AS Logic
participant ":AddExpenseToEventCommand" as Command
participant ":ExpenseManager" as ExpenseManager
participant ":EventManager" as EventManager
participant "newOwningEvent:Event" as noe
participant "expense:Expense" as Expense
participant "dataManager:EventExpenseDataIntegrityManager" as dataManager


Logic -> Command: execute(dashboard)
activate Command

Command -> ExpenseManager: isExpenseIndexValid(expenseIdx : int)
activate ExpenseManager
ExpenseManager --> Command: isValidExpenseIndex : bool
deactivate ExpenseManager

Command -> EventManager: isEventIndexValid(eventIdx : int)
activate EventManager
EventManager --> Command: isValidEventIndex : bool
deactivate EventManager

opt !isValidExpenseIndex || !isValidEventIndex
    note right of Command
        Invalid indexes. Return immediately.
    end note
    Command --> Logic: 
end

Command -> ExpenseManager: getExpense(expenseIdx : int)
activate ExpenseManager
ExpenseManager --> Command: expense
deactivate ExpenseManager

Command -> EventManager: getEvent(eventIdx : int)
activate EventManager
EventManager --> Command: newOwningEvent
deactivate EventManager

Command -> noe : containsExpense(expense)
activate noe
noe --> Command: isExpenseOwnedByEvent : bool
deactivate noe

opt isExpenseOwnedByEvent
    note right of Command
        No further action required. Return immediately.
    end note
    Command --> Logic:
end

Command -> Expense: getOwningEvent()
activate Expense
Expense --> Command: originalOwningEvent : Event
deactivate Expense

opt originalOwningEvent != null
    note right of Command
        Inform the user that the expense is being moved to a new event.
    end note
end

Command -> dataManager: buildConnection(expense, newOwningEvent)
activate dataManager
dataManager --> Command:
deactivate dataManager

note right of Command
    Inform the user that the expense has been successfully added to the new event.
end note

Command --> Logic:
deactivate Command
destroy Command

@enduml