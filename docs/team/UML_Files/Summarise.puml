@startuml
'https://plantuml.com/sequence-diagram

skinparam Style strictuml
autonumber
actor User
participant UI << class >>
participant ":Logic" as Logic
activate Logic
participant ":GeneralInputParser" as GeneralInputParser
participant SummariseParser << class >>

participant ":SummariseCommand" as SummariseCommand order 28
participant ":InvalidCommand" as InvalidCommand order 29
participant ":Dashboard" as Dashboard order 30
participant ":ExpenseManager" as ExpenseManager order 31

Logic -> UI ++ : getUserInput()

User -> UI : userInput
UI --> Logic : userInput

Logic -> GeneralInputParser ++ : getCommandFromUserInput(userInput)
GeneralInputParser -> SummariseParser ++ : parseInput(userInput)
alt valid userInput
    SummariseParser -> SummariseCommand ** : new SummariseCommand(...)
    activate SummariseCommand
    SummariseCommand --> SummariseParser --: commandToExecute:SummariseCommand
else else
    SummariseParser -> InvalidCommand ** : new InvalidCommand(...)
    activate InvalidCommand
    InvalidCommand --> SummariseParser -- : commandToExecute:InvalidCommand
end

SummariseParser --> GeneralInputParser -- : commandToExecute
GeneralInputParser --> Logic -- : command

alt command.instanceOf(SummariseCommand)
    Logic -> SummariseCommand -- : execute(...)
    activate SummariseCommand
    SummariseCommand -> Dashboard ++ : getExpenseManager()
    Dashboard --> SummariseCommand -- : ExpenseManager
    SummariseCommand -> ExpenseManager ++ : summariseExpenses(...)
    ExpenseManager -> ExpenseManager ++ : getExpensesToSummarise(...)
    ExpenseManager -> ExpenseManager -- : expensesToSummarise
    alt expensesToSummarise.isEmpty()
        ExpenseManager -> UI : prettyPrint("Nothing to summarise!")
        UI -> User : "Nothing to summarise!"
    else else
        ExpenseManager -> UI : prettyPrint(summarisedExpensesListString)
        UI -> User : summarisedExpensesListString
    end
    ExpenseManager --> SummariseCommand -- : summary
    SummariseCommand -> UI -- : prettyPrint(summary)
    destroy SummariseCommand
    UI --> User : summary
else command.instanceOf(InvalidCommand)
    Logic -> InvalidCommand -- : execute(...)
    activate InvalidCommand
    InvalidCommand -> UI -- : prettyPrint(errorMessage)
    destroy InvalidCommand
    UI --> User : errorMessage
end
deactivate UI






@enduml